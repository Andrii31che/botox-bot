import telebot
import requests
import json
import os
import hmac
import hashlib
import base64
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '7620910107:AAFbbfyZIaijTYTuUZxbAJ3tDUfywcxUAMA'
WAYFORPAY_LINK = 'https://secure.wayforpay.com/button/b55749e6e1ec8'
COURSE_LINK = 'https://t.me/+b-d546qUk0Q0MzUy'
MERCHANT_ACCOUNT = 'your_merchant_login'       # ‚Üê –í—Å—Ç–∞–≤—å —Å–≤–æ–π –ª–æ–≥–∏–Ω WayForPay
MERCHANT_SECRET_KEY = 'your_secret_key'        # ‚Üê –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
ORDER_REFERENCE = 'botox_course'               # –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω user_id
ADMIN_ID = 902623569

bot = telebot.TeleBot(BOT_TOKEN)
USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(USERS_FILE, "w") as f:
        json.dump(data, f, indent=4)

def generate_signature(data_dict, secret_key):
    ordered_keys = [
        'merchantAccount',
        'orderReference',
        'orderDate',
    ]
    signature_str = ';'.join([str(data_dict[key]) for key in ordered_keys])
    signature = base64.b64encode(
        hmac.new(secret_key.encode(), signature_str.encode(), hashlib.md5).digest()
    ).decode()
    return signature

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or f"user_{user_id}"
    args = message.text.split()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
    else:
        users = {}

    if user_id not in users:
        users[user_id] = {
            "username": username,
            "ref": None,
            "paid": False
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if len(args) > 1 and args[1].startswith("ref_"):
            ref_name = args[1][4:]
            users[user_id]["ref"] = ref_name

    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)

    bot.send_message(message.chat.id, f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}, –Ω–∞ –∫—É—Ä—Å –ø–æ –±–æ—Ç–æ–∫—Å—É!

üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
{WAYFORPAY_LINK}

‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /check

‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @andreixc
""")

@bot.message_handler(commands=['check'])
def check_payment(message):
    user_id = str(message.from_user.id)
    reference = f"{ORDER_REFERENCE}_{user_id}"

    data = {
        "transactionType": "CHECK_STATUS",
        "merchantAccount": MERCHANT_ACCOUNT,
        "orderReference": reference,
        "apiVersion": 1
    }

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    keys = [
        data["merchantAccount"],
        data["orderReference"],
        data["apiVersion"]
    ]
    message_string = ";".join(str(k) for k in keys)
    signature = base64.b64encode(
        hmac.new(MERCHANT_SECRET_KEY.encode(), message_string.encode(), hashlib.md5).digest()
    ).decode()
    data["merchantSignature"] = signature

    try:
        response = requests.post("https://api.wayforpay.com/api", json=data)
        result = response.json()

        if 'transactionStatus' in result and result['transactionStatus'] == "Approved":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
            if os.path.exists(USERS_FILE):
                with open(USERS_FILE, "r") as f:
                    users = json.load(f)
            else:
                users = {}

            users[user_id] = {
                "username": message.from_user.username,
                "ref": message.text.split(" ")[1] if len(message.text.split()) > 1 else None
            }

            with open(USERS_FILE, "w") as f:
                json.dump(users, f, indent=2)

            bot.send_message(message.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: {COURSE_LINK}")
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å.")
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤—ã —Ç–æ—á–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @andreixc")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {str(e)}")

@bot.message_handler(commands=['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
def stats_handler(message):
    if message.from_user.id != ADMIN_ID:
        return

    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    ref_count = {}
    paid_ref_count = {}

    for user in users.values():
        ref = user.get("ref")
        if ref:
            ref_count[ref] = ref_count.get(ref, 0) + 1
            if user.get("paid"):
                paid_ref_count[ref] = paid_ref_count.get(ref, 0) + 1

    text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n"
    if not ref_count:
        text += "–ù–µ—Ç –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        for ref, total in ref_count.items():
            paid = paid_ref_count.get(ref, 0)
            text += f"üë§ {ref}: {total} –ø—Ä–∏–≥–ª–∞—Å–∏–ª, –∏–∑ –Ω–∏—Ö {paid} –æ–ø–ª–∞—Ç–∏–ª–∏\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['id'])
def get_id(message):
    bot.send_message(message.chat.id, f"üÜî –í–∞—à Telegram ID: {message.chat.id}")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.polling()